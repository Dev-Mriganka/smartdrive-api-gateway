server:
  port: 8080
  # Security configuration
  servlet:
    session:
      cookie:
        secure: true
        http-only: true
        same-site: strict
  # Connection and timeout settings
  netty:
    connection-timeout: 30s
    idle-timeout: 60s
  compression:
    enabled: true
  http2:
    enabled: true

spring:
  application:
    name: gateway-service

  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      database: ${REDIS_DATABASE:2}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms

  cloud:
    gateway:
      server:
        webflux:
          discovery:
            locator:
              enabled: false
              lower-case-service-id: true
          routes:
            # Auth Service Routes
            - id: auth-service-oauth2
              uri: lb://auth-service
              predicates:
                - Path=/auth/oauth2/**
              filters:
                - StripPrefix=1
                - name: CircuitBreaker
                  args:
                    name: auth-service-circuit-breaker
                    fallbackUri: forward:/fallback/auth

            - id: auth-service-well-known
              uri: lb://auth-service
              predicates:
                - Path=/auth/.well-known/**
              filters:
                - StripPrefix=1
                - name: CircuitBreaker
                  args:
                    name: auth-service-circuit-breaker
                    fallbackUri: forward:/fallback/auth

            - id: auth-service-api
              uri: lb://auth-service
              predicates:
                - Path=/auth/api/**
              filters:
                - StripPrefix=1
                - name: CircuitBreaker
                  args:
                    name: auth-service-circuit-breaker
                    fallbackUri: forward:/fallback/auth

            # Direct Auth API Routes (for UI login)
            - id: auth-service-direct
              uri: lb://auth-service
              predicates:
                - Path=/api/v1/auth/**
              filters:
                - name: CircuitBreaker
                  args:
                    name: auth-service-circuit-breaker
                    fallbackUri: forward:/fallback/auth

            # User Service Routes
            - id: user-admin-routes
              uri: lb://user-service
              predicates:
                - Path=/api/v1/admin/users/**
              filters:
                - name: CircuitBreaker
                  args:
                    name: user-service-admin-cb
                    fallbackUri: forward:/fallback/users

            # User Service - Regular Routes
            - id: user-service-routes
              uri: lb://user-service  
              predicates:
                - Path=/api/v1/users/**
              filters:
                - name: CircuitBreaker
                  args:
                    name: user-service-cb
                    fallbackUri: forward:/fallback/users


            # File Storage Service Routes
            - id: file-storage-service
              uri: lb://file-storage-service
              predicates:
                - Path=/api/v1/files/**
              filters:
                - StripPrefix=1
                - name: CircuitBreaker
                  args:
                    name: file-storage-circuit-breaker
                    fallbackUri: forward:/fallback/files

            # AI Service Routes
            - id: ai-service
              uri: lb://ai-service
              predicates:
                - Path=/api/v1/ai/**
              filters:
                - StripPrefix=1
                - name: CircuitBreaker
                  args:
                    name: ai-service-circuit-breaker
                    fallbackUri: forward:/fallback/ai

            # Search Service Routes
            - id: search-service
              uri: lb://search-service
              predicates:
                - Path=/api/v1/search/**
              filters:
                - StripPrefix=1
                - name: CircuitBreaker
                  args:
                    name: search-service-circuit-breaker
                    fallbackUri: forward:/fallback/search

  security:
    oauth2:
      resourceserver:
        jwt:
          # Use JWK Set URI for local token validation (faster!)
          jwk-set-uri: http://auth-service:8085/.well-known/jwks.json
          # JWT decoder configuration for fast local validation
          issuer-uri: http://auth-service:8085

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,gateway
  endpoint:
    health:
      show-details: always

logging:
  level:
    com.smartdrive.gateway: DEBUG
    org.springframework.cloud.gateway: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Eureka Client Configuration
eureka:
  client:
    service-url:
      defaultZone: http://eureka-server:8761/eureka/
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true
    hostname: api-gateway

  cloud:
    loadbalancer:
      cache:
        enabled: true
        ttl: 35s
        capacity: 256
      health-check:
        initial-delay: 0
        interval: 25s

# Gateway Security Configuration
gateway:
  security:
    internal-secret: ${GATEWAY_SECURITY_INTERNAL_SECRET:}
    signature-secret: ${GATEWAY_SECURITY_SIGNATURE_SECRET:}
    jwt-signing-key: ${GATEWAY_SECURITY_JWT_SIGNING_KEY:}
  # Rate limiting configuration
  rate-limit:
    enabled: true
    requests-per-minute: ${RATE_LIMIT_RPM:100}
    requests-per-hour: ${RATE_LIMIT_RPH:1000}
    burst-capacity: ${RATE_LIMIT_BURST:150}
  # Circuit breaker configuration
  circuit-breaker:
    failure-rate-threshold: 50
    slow-call-rate-threshold: 50
    slow-call-duration-threshold: 60s
    minimum-number-of-calls: 10
    sliding-window-size: 10